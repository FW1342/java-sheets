plugins {
  id 'java'
  id 'application'
}

group 'dev.jsheets'
version '0.1.0'

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':protocol')
	implementation project(':runtime')
	implementation 'org.cfg4j:cfg4j-core:4.4.0'
  implementation 'io.javalin:javalin:3.13.11'
	implementation 'org.slf4j:slf4j-simple:1.7.30'
  implementation 'com.google.protobuf:protobuf-java-util:3.17.3'
  implementation 'net.sourceforge.argparse4j:argparse4j:0.9.0'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'com.google.flogger:flogger:0.6'
	implementation 'com.google.flogger:flogger-slf4j-backend:0.6'
  implementation 'com.google.dagger:dagger:2.13'
  annotationProcessor 'com.google.dagger:dagger-compiler:2.13'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
  useJUnitPlatform()
}

mainClassName = 'jsheets.server.App'

task copyDependencies(type: Copy) {
  from configurations.runtimeClasspath
  into "$buildDir/libs"
}

private def listClassPath() {
  return configurations.runtimeClasspath.collect { "libs/${it.name}" }.join(" ")
}

jar {
  archiveName 'app.jar'
  manifest {
    attributes(
      "Main-Class": "jsheets.server.App",
      "Class-Path": listClassPath()
    )
  }
}

def dockerImageName = "jsheets"
def dockerImageTag = System.getenv("TARGET_IMAGE_TAG") || "latest"
def dockerImage = "$dockerImageName:$dockerImageTag"

task buildDocker(type: Exec) {
  dependsOn copyDependencies, build
  workingDir "$projectDir"
  commandLine "docker", "build", "--rm", ".", "-t", dockerImage, "-f", "./deploy/Dockerfile"
}

task justRunDocker(type: Exec) {
  workingDir "$projectDir"
  commandLine "docker", "run", dockerImage, "-p", "8080:8080"
}

task runDocker(type: Exec) {
  dependsOn buildDocker
	workingDir "$projectDir"
	commandLine "docker", "run", dockerImage, "-p", "8080:8080"
}

