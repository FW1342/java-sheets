// package: jsheets
// file: jsheets/api/snippet.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";

export class Snippet extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getName(): string;
  setName(value: string): void;

  clearComponentsList(): void;
  getComponentsList(): Array<Snippet.Component>;
  setComponentsList(value: Array<Snippet.Component>): void;
  addComponents(value?: Snippet.Component, index?: number): Snippet.Component;

  clearDependenciesList(): void;
  getDependenciesList(): Array<Snippet.Dependency>;
  setDependenciesList(value: Array<Snippet.Dependency>): void;
  addDependencies(value?: Snippet.Dependency, index?: number): Snippet.Dependency;

  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): Snippet.Metadata | undefined;
  setMetadata(value?: Snippet.Metadata): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Snippet.AsObject;
  static toObject(includeInstance: boolean, msg: Snippet): Snippet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Snippet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Snippet;
  static deserializeBinaryFromReader(message: Snippet, reader: jspb.BinaryReader): Snippet;
}

export namespace Snippet {
  export type AsObject = {
    id: string,
    name: string,
    componentsList: Array<Snippet.Component.AsObject>,
    dependenciesList: Array<Snippet.Dependency.AsObject>,
    metadata?: Snippet.Metadata.AsObject,
  }

  export class Component extends jspb.Message {
    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Component.AsObject;
    static toObject(includeInstance: boolean, msg: Component): Component.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Component, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Component;
    static deserializeBinaryFromReader(message: Component, reader: jspb.BinaryReader): Component;
  }

  export namespace Component {
    export type AsObject = {
    }

    export interface KindMap {
      KIND_UNSPECIFIED: 0;
      TEXT: 1;
      CODE: 2;
    }

    export const Kind: KindMap;
  }

  export class Reference extends jspb.Message {
    getSheetId(): string;
    setSheetId(value: string): void;

    getSnippetId(): string;
    setSnippetId(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Reference.AsObject;
    static toObject(includeInstance: boolean, msg: Reference): Reference.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Reference, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Reference;
    static deserializeBinaryFromReader(message: Reference, reader: jspb.BinaryReader): Reference;
  }

  export namespace Reference {
    export type AsObject = {
      sheetId: string,
      snippetId: string,
    }
  }

  export class Dependency extends jspb.Message {
    hasReference(): boolean;
    clearReference(): void;
    getReference(): Snippet.Reference | undefined;
    setReference(value?: Snippet.Reference): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Dependency.AsObject;
    static toObject(includeInstance: boolean, msg: Dependency): Dependency.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Dependency, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Dependency;
    static deserializeBinaryFromReader(message: Dependency, reader: jspb.BinaryReader): Dependency;
  }

  export namespace Dependency {
    export type AsObject = {
      reference?: Snippet.Reference.AsObject,
    }
  }

  export class Visibility extends jspb.Message {
    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Visibility.AsObject;
    static toObject(includeInstance: boolean, msg: Visibility): Visibility.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Visibility, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Visibility;
    static deserializeBinaryFromReader(message: Visibility, reader: jspb.BinaryReader): Visibility;
  }

  export namespace Visibility {
    export type AsObject = {
    }
  }

  export class Metadata extends jspb.Message {
    hasCreateTime(): boolean;
    clearCreateTime(): void;
    getCreateTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreateTime(value?: google_protobuf_timestamp_pb.Timestamp): void;

    hasUpdateTime(): boolean;
    clearUpdateTime(): void;
    getUpdateTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setUpdateTime(value?: google_protobuf_timestamp_pb.Timestamp): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Metadata.AsObject;
    static toObject(includeInstance: boolean, msg: Metadata): Metadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Metadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Metadata;
    static deserializeBinaryFromReader(message: Metadata, reader: jspb.BinaryReader): Metadata;
  }

  export namespace Metadata {
    export type AsObject = {
      createTime?: google_protobuf_timestamp_pb.Timestamp.AsObject,
      updateTime?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    }
  }
}

