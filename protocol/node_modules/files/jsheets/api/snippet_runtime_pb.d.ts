// package: jsheets
// file: jsheets/api/snippet_runtime.proto

import * as jspb from "google-protobuf";
import * as jsheets_api_snippet_pb from "../../jsheets/api/snippet_pb";

export class EvaluatedSnippet extends jspb.Message {
  hasReference(): boolean;
  clearReference(): void;
  getReference(): jsheets_api_snippet_pb.Snippet.Reference | undefined;
  setReference(value?: jsheets_api_snippet_pb.Snippet.Reference): void;

  getHash(): string;
  setHash(value: string): void;

  clearDependenciesList(): void;
  getDependenciesList(): Array<EvaluatedSnippet>;
  setDependenciesList(value: Array<EvaluatedSnippet>): void;
  addDependencies(value?: EvaluatedSnippet, index?: number): EvaluatedSnippet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvaluatedSnippet.AsObject;
  static toObject(includeInstance: boolean, msg: EvaluatedSnippet): EvaluatedSnippet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvaluatedSnippet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvaluatedSnippet;
  static deserializeBinaryFromReader(message: EvaluatedSnippet, reader: jspb.BinaryReader): EvaluatedSnippet;
}

export namespace EvaluatedSnippet {
  export type AsObject = {
    reference?: jsheets_api_snippet_pb.Snippet.Reference.AsObject,
    hash: string,
    dependenciesList: Array<EvaluatedSnippet.AsObject>,
  }
}

export class SnippetSources extends jspb.Message {
  hasReference(): boolean;
  clearReference(): void;
  getReference(): jsheets_api_snippet_pb.Snippet.Reference | undefined;
  setReference(value?: jsheets_api_snippet_pb.Snippet.Reference): void;

  getHash(): string;
  setHash(value: string): void;

  clearCodeComponentsList(): void;
  getCodeComponentsList(): Array<SnippetSources.CodeComponent>;
  setCodeComponentsList(value: Array<SnippetSources.CodeComponent>): void;
  addCodeComponents(value?: SnippetSources.CodeComponent, index?: number): SnippetSources.CodeComponent;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SnippetSources.AsObject;
  static toObject(includeInstance: boolean, msg: SnippetSources): SnippetSources.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SnippetSources, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SnippetSources;
  static deserializeBinaryFromReader(message: SnippetSources, reader: jspb.BinaryReader): SnippetSources;
}

export namespace SnippetSources {
  export type AsObject = {
    reference?: jsheets_api_snippet_pb.Snippet.Reference.AsObject,
    hash: string,
    codeComponentsList: Array<SnippetSources.CodeComponent.AsObject>,
  }

  export class CodeComponent extends jspb.Message {
    getId(): string;
    setId(value: string): void;

    getOrder(): number;
    setOrder(value: number): void;

    getCode(): string;
    setCode(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CodeComponent.AsObject;
    static toObject(includeInstance: boolean, msg: CodeComponent): CodeComponent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CodeComponent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CodeComponent;
    static deserializeBinaryFromReader(message: CodeComponent, reader: jspb.BinaryReader): CodeComponent;
  }

  export namespace CodeComponent {
    export type AsObject = {
      id: string,
      order: number,
      code: string,
    }
  }
}

export class Evaluation extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Evaluation.AsObject;
  static toObject(includeInstance: boolean, msg: Evaluation): Evaluation.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Evaluation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Evaluation;
  static deserializeBinaryFromReader(message: Evaluation, reader: jspb.BinaryReader): Evaluation;
}

export namespace Evaluation {
  export type AsObject = {
    id: string,
  }
}

export class StartEvaluationRequest extends jspb.Message {
  hasSnippet(): boolean;
  clearSnippet(): void;
  getSnippet(): EvaluatedSnippet | undefined;
  setSnippet(value?: EvaluatedSnippet): void;

  clearSourcesList(): void;
  getSourcesList(): Array<SnippetSources>;
  setSourcesList(value: Array<SnippetSources>): void;
  addSources(value?: SnippetSources, index?: number): SnippetSources;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StartEvaluationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StartEvaluationRequest): StartEvaluationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StartEvaluationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StartEvaluationRequest;
  static deserializeBinaryFromReader(message: StartEvaluationRequest, reader: jspb.BinaryReader): StartEvaluationRequest;
}

export namespace StartEvaluationRequest {
  export type AsObject = {
    snippet?: EvaluatedSnippet.AsObject,
    sourcesList: Array<SnippetSources.AsObject>,
  }
}

export class MissingSources extends jspb.Message {
  clearMissingSnippetsList(): void;
  getMissingSnippetsList(): Array<jsheets_api_snippet_pb.Snippet.Reference>;
  setMissingSnippetsList(value: Array<jsheets_api_snippet_pb.Snippet.Reference>): void;
  addMissingSnippets(value?: jsheets_api_snippet_pb.Snippet.Reference, index?: number): jsheets_api_snippet_pb.Snippet.Reference;

  getCachingPolicy(): SourceCachingPolicyMap[keyof SourceCachingPolicyMap];
  setCachingPolicy(value: SourceCachingPolicyMap[keyof SourceCachingPolicyMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MissingSources.AsObject;
  static toObject(includeInstance: boolean, msg: MissingSources): MissingSources.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MissingSources, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MissingSources;
  static deserializeBinaryFromReader(message: MissingSources, reader: jspb.BinaryReader): MissingSources;
}

export namespace MissingSources {
  export type AsObject = {
    missingSnippetsList: Array<jsheets_api_snippet_pb.Snippet.Reference.AsObject>,
    cachingPolicy: SourceCachingPolicyMap[keyof SourceCachingPolicyMap],
  }
}

export class StopEvaluationRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StopEvaluationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StopEvaluationRequest): StopEvaluationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StopEvaluationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StopEvaluationRequest;
  static deserializeBinaryFromReader(message: StopEvaluationRequest, reader: jspb.BinaryReader): StopEvaluationRequest;
}

export namespace StopEvaluationRequest {
  export type AsObject = {
  }
}

export class EvaluateRequest extends jspb.Message {
  hasStart(): boolean;
  clearStart(): void;
  getStart(): StartEvaluationRequest | undefined;
  setStart(value?: StartEvaluationRequest): void;

  hasStop(): boolean;
  clearStop(): void;
  getStop(): StopEvaluationRequest | undefined;
  setStop(value?: StopEvaluationRequest): void;

  getMessageCase(): EvaluateRequest.MessageCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvaluateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: EvaluateRequest): EvaluateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvaluateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvaluateRequest;
  static deserializeBinaryFromReader(message: EvaluateRequest, reader: jspb.BinaryReader): EvaluateRequest;
}

export namespace EvaluateRequest {
  export type AsObject = {
    start?: StartEvaluationRequest.AsObject,
    stop?: StopEvaluationRequest.AsObject,
  }

  export enum MessageCase {
    MESSAGE_NOT_SET = 0,
    START = 1,
    STOP = 2,
  }
}

export class Text extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Text.AsObject;
  static toObject(includeInstance: boolean, msg: Text): Text.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Text, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Text;
  static deserializeBinaryFromReader(message: Text, reader: jspb.BinaryReader): Text;
}

export namespace Text {
  export type AsObject = {
  }
}

export class EvaluationResult extends jspb.Message {
  getComponentId(): string;
  setComponentId(value: string): void;

  getKind(): EvaluationResult.KindMap[keyof EvaluationResult.KindMap];
  setKind(value: EvaluationResult.KindMap[keyof EvaluationResult.KindMap]): void;

  getOutput(): string;
  setOutput(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvaluationResult.AsObject;
  static toObject(includeInstance: boolean, msg: EvaluationResult): EvaluationResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvaluationResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvaluationResult;
  static deserializeBinaryFromReader(message: EvaluationResult, reader: jspb.BinaryReader): EvaluationResult;
}

export namespace EvaluationResult {
  export type AsObject = {
    componentId: string,
    kind: EvaluationResult.KindMap[keyof EvaluationResult.KindMap],
    output: string,
  }

  export interface KindMap {
    KIND_UNSPECIFIED: 0;
    INFO: 1;
    ERROR: 2;
  }

  export const Kind: KindMap;
}

export class CodeSpan extends jspb.Message {
  getStart(): number;
  setStart(value: number): void;

  getEnd(): number;
  setEnd(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CodeSpan.AsObject;
  static toObject(includeInstance: boolean, msg: CodeSpan): CodeSpan.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CodeSpan, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CodeSpan;
  static deserializeBinaryFromReader(message: CodeSpan, reader: jspb.BinaryReader): CodeSpan;
}

export namespace CodeSpan {
  export type AsObject = {
    start: number,
    end: number,
  }
}

export class EvaluationError extends jspb.Message {
  getComponentId(): string;
  setComponentId(value: string): void;

  getKind(): string;
  setKind(value: string): void;

  getMessage(): string;
  setMessage(value: string): void;

  hasSpan(): boolean;
  clearSpan(): void;
  getSpan(): CodeSpan | undefined;
  setSpan(value?: CodeSpan): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvaluationError.AsObject;
  static toObject(includeInstance: boolean, msg: EvaluationError): EvaluationError.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvaluationError, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvaluationError;
  static deserializeBinaryFromReader(message: EvaluationError, reader: jspb.BinaryReader): EvaluationError;
}

export namespace EvaluationError {
  export type AsObject = {
    componentId: string,
    kind: string,
    message: string,
    span?: CodeSpan.AsObject,
  }
}

export class EvaluateResponse extends jspb.Message {
  clearMissingSourcesList(): void;
  getMissingSourcesList(): Array<MissingSources>;
  setMissingSourcesList(value: Array<MissingSources>): void;
  addMissingSources(value?: MissingSources, index?: number): MissingSources;

  clearTextList(): void;
  getTextList(): Array<Text>;
  setTextList(value: Array<Text>): void;
  addText(value?: Text, index?: number): Text;

  clearResultList(): void;
  getResultList(): Array<EvaluationResult>;
  setResultList(value: Array<EvaluationResult>): void;
  addResult(value?: EvaluationResult, index?: number): EvaluationResult;

  clearErrorList(): void;
  getErrorList(): Array<EvaluationError>;
  setErrorList(value: Array<EvaluationError>): void;
  addError(value?: EvaluationError, index?: number): EvaluationError;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvaluateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EvaluateResponse): EvaluateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvaluateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvaluateResponse;
  static deserializeBinaryFromReader(message: EvaluateResponse, reader: jspb.BinaryReader): EvaluateResponse;
}

export namespace EvaluateResponse {
  export type AsObject = {
    missingSourcesList: Array<MissingSources.AsObject>,
    textList: Array<Text.AsObject>,
    resultList: Array<EvaluationResult.AsObject>,
    errorList: Array<EvaluationError.AsObject>,
  }
}

export interface SourceCachingPolicyMap {
  POLICY_UNSPECIFIED: 0;
}

export const SourceCachingPolicy: SourceCachingPolicyMap;

